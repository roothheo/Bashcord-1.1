const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ Construction de l\'installer Bashcord...\n');

// V√©rifier les pr√©requis
function checkPrerequisites() {
    console.log('üìã V√©rification des pr√©requis...');
    
    try {
        execSync('node --version', { stdio: 'ignore' });
        console.log('‚úÖ Node.js d√©tect√©');
    } catch (error) {
        console.error('‚ùå Node.js non trouv√©');
        process.exit(1);
    }
    
    try {
        execSync('npm --version', { stdio: 'ignore' });
        console.log('‚úÖ npm d√©tect√©');
    } catch (error) {
        console.error('‚ùå npm non trouv√©');
        process.exit(1);
    }
    
    console.log('');
}

// Cr√©er les assets n√©cessaires
function createAssets() {
    console.log('üé® Cr√©ation des assets...');
    
    const assetsDir = path.join(__dirname, 'assets');
    if (!fs.existsSync(assetsDir)) {
        fs.mkdirSync(assetsDir, { recursive: true });
    }
    
    // Cr√©er une ic√¥ne basique si elle n'existe pas
    const iconPath = path.join(assetsDir, 'icon.png');
    if (!fs.existsSync(iconPath)) {
        console.log('‚ö†Ô∏è  Aucune ic√¥ne trouv√©e, cr√©ation d\'une ic√¥ne par d√©faut...');
        // Dans une vraie impl√©mentation, vous ajouteriez une vraie ic√¥ne ici
        fs.writeFileSync(iconPath, ''); // Fichier vide pour l'exemple
    }
    
    // Cr√©er le logo Bashcord si il n'existe pas
    const logoPath = path.join(assetsDir, 'bashcord-logo.png');
    if (!fs.existsSync(logoPath)) {
        console.log('‚ö†Ô∏è  Aucun logo trouv√©, cr√©ation d\'un logo par d√©faut...');
        fs.writeFileSync(logoPath, ''); // Fichier vide pour l'exemple
    }
    
    console.log('‚úÖ Assets cr√©√©s');
    console.log('');
}

// Installer les d√©pendances
function installDependencies() {
    console.log('üì¶ Installation des d√©pendances...');
    
    try {
        execSync('npm install', { stdio: 'inherit' });
        console.log('‚úÖ D√©pendances install√©es');
    } catch (error) {
        console.error('‚ùå Erreur lors de l\'installation des d√©pendances');
        process.exit(1);
    }
    
    console.log('');
}

// Builder l'application
function buildApplication() {
    console.log('üî® Construction de l\'application...');
    
    const platform = process.platform;
    const arch = process.arch;
    
    console.log(`üì± Plateforme d√©tect√©e: ${platform} (${arch})`);
    
    try {
        // Build pour la plateforme actuelle
        execSync('npm run build', { stdio: 'inherit' });
        console.log('‚úÖ Application construite avec succ√®s');
    } catch (error) {
        console.error('‚ùå Erreur lors de la construction');
        process.exit(1);
    }
    
    console.log('');
}

// Afficher les informations de fin
function showCompletionInfo() {
    console.log('üéâ Construction termin√©e avec succ√®s !\n');
    
    console.log('üìÅ Fichiers g√©n√©r√©s dans le dossier "dist/"');
    console.log('üöÄ Pour tester l\'installer, utilisez: npm start');
    console.log('üì¶ Pour distribuer, utilisez les fichiers dans dist/\n');
    
    // Afficher la taille des fichiers g√©n√©r√©s
    const distDir = path.join(__dirname, 'dist');
    if (fs.existsSync(distDir)) {
        console.log('üìä Taille des fichiers g√©n√©r√©s:');
        const files = fs.readdirSync(distDir);
        files.forEach(file => {
            const filePath = path.join(distDir, file);
            const stats = fs.statSync(filePath);
            const sizeInMB = (stats.size / (1024 * 1024)).toFixed(2);
            console.log(`   - ${file}: ${sizeInMB} MB`);
        });
    }
    
    console.log('\nüíú Bashcord Installer pr√™t √† √™tre utilis√© !');
}

// Ex√©cution principale
async function main() {
    try {
        checkPrerequisites();
        createAssets();
        installDependencies();
        buildApplication();
        showCompletionInfo();
    } catch (error) {
        console.error('\n‚ùå Erreur lors de la construction:', error.message);
        process.exit(1);
    }
}

// Gestion des arguments de ligne de commande
const args = process.argv.slice(2);
if (args.includes('--help') || args.includes('-h')) {
    console.log(`
üöÄ Script de construction Bashcord Installer

Usage: node build.js [options]

Options:
  --help, -h     Afficher this message
  --clean        Nettoyer avant la construction
  --all          Construire pour toutes les plateformes

Examples:
  node build.js
  node build.js --clean
  node build.js --all
    `);
    process.exit(0);
}

if (args.includes('--clean')) {
    console.log('üßπ Nettoyage des fichiers de construction...');
    const distDir = path.join(__dirname, 'dist');
    if (fs.existsSync(distDir)) {
        fs.rmSync(distDir, { recursive: true, force: true });
        console.log('‚úÖ Nettoyage termin√©\n');
    }
}

if (args.includes('--all')) {
    console.log('üåç Construction pour toutes les plateformes...');
    // Dans la fonction buildApplication, on utiliserait npm run build-all
}

main(); 