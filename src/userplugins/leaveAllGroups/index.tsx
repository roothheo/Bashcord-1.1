/*
 * Vencord, a Discord client mod
 * Copyright (c) 2024 Vendicated and contributors
 * SPDX-License-Identifier: GPL-3.0-or-later
 */

import { findGroupChildrenByChildId, NavContextMenuPatchCallback } from "@api/ContextMenu";
import { definePluginSettings } from "@api/Settings";
import { showNotification } from "@api/Notifications";
import { Devs } from "@utils/constants";
import definePlugin, { OptionType } from "@utils/types";
import { findStoreLazy } from "@webpack";
import { ChannelStore, FluxDispatcher, Menu, RestAPI, showToast, Toasts, UserStore } from "@webpack/common";
import { Channel } from "discord-types/general";

// Utiliser PrivateChannelSortStore comme dans les autres plugins
const PrivateChannelSortStore = findStoreLazy("PrivateChannelSortStore") as { getPrivateChannelIds: () => string[]; };

const settings = definePluginSettings({
    enabled: {
        type: OptionType.BOOLEAN,
        description: "Activer le plugin LeaveAllGroups",
        default: true
    },
    showNotifications: {
        type: OptionType.BOOLEAN,
        description: "Afficher les notifications lors des actions",
        default: true
    },
    confirmBeforeLeave: {
        type: OptionType.BOOLEAN,
        description: "Demander confirmation avant de quitter tous les groupes",
        default: false
    },
    delayBetweenLeaves: {
        type: OptionType.NUMBER,
        description: "D√©lai en millisecondes entre chaque sortie de groupe (pour √©viter le rate limiting)",
        default: 200,
        min: 50,
        max: 100
    },
    debugMode: {
        type: OptionType.BOOLEAN,
        description: "Mode d√©bogage (logs d√©taill√©s)",
        default: false
    }
});

// Fonction de log avec pr√©fixe
function log(message: string, level: "info" | "warn" | "error" = "info") {
    const timestamp = new Date().toLocaleTimeString();
    const prefix = `[LeaveAllGroups ${timestamp}]`;

    switch (level) {
        case "warn":
            console.warn(prefix, message);
            break;
        case "error":
            console.error(prefix, message);
            break;
        default:
            console.log(prefix, message);
    }
}

// Log de d√©bogage
function debugLog(message: string) {
    if (settings.store.debugMode) {
        log(`üîç ${message}`, "info");
    }
}

// Fonction pour confirmer l'action
function confirmLeaveAll(groupCount: number): boolean {
    if (!settings.store.confirmBeforeLeave) return true;

    return confirm(
        `‚ö†Ô∏è √ätes-vous s√ªr de vouloir quitter tous les ${groupCount} groupes ?\n\n` +
        "Cette action ne peut pas √™tre annul√©e.\n" +
        "Vous serez retir√© de tous les groupes Discord instantan√©ment."
    );
}

// Fonction pour quitter un groupe sp√©cifique
async function leaveGroup(channelId: string): Promise<boolean> {
    try {
        debugLog(`Tentative de sortie du groupe ${channelId}`);

        // Utiliser l'API Discord pour quitter le groupe
        await RestAPI.del({
            url: `/channels/${channelId}`
        });

        debugLog(`‚úÖ Groupe ${channelId} quitt√© avec succ√®s`);
        return true;
    } catch (error) {
        log(`‚ùå Erreur lors de la sortie du groupe ${channelId}: ${error}`, "error");
        return false;
    }
}

// Fonction pour obtenir tous les groupes
function getAllGroups(): Channel[] {
    const privateChannelIds = PrivateChannelSortStore.getPrivateChannelIds();
    const groups: Channel[] = [];

    privateChannelIds.forEach((channelId: string) => {
        const channel = ChannelStore.getChannel(channelId);

        // V√©rifier que c'est un groupe DM (type 3) et non un DM priv√© (type 1)
        if (channel && channel.type === 3) {
            groups.push(channel);
        }
    });

    return groups;
}

// Fonction principale pour quitter tous les groupes
async function leaveAllGroups() {
    if (!settings.store.enabled) {
        log("Plugin d√©sactiv√©", "warn");
        return;
    }

    try {
        const currentUserId = UserStore.getCurrentUser()?.id;

        if (!currentUserId) {
            log("Impossible d'obtenir l'ID de l'utilisateur actuel", "error");
            return;
        }

        const groups = getAllGroups();

        debugLog(`üìä Informations:
- Nombre de groupes trouv√©s: ${groups.length}
- Utilisateur actuel: ${currentUserId}`);

        if (groups.length === 0) {
            log("Aucun groupe √† quitter", "warn");

            if (settings.store.showNotifications) {
                showNotification({
                    title: "‚ÑπÔ∏è LeaveAllGroups",
                    body: "Aucun groupe √† quitter",
                    icon: undefined
                });
            }

            showToast(Toasts.Type.MESSAGE, "‚ÑπÔ∏è Aucun groupe √† quitter");
            return;
        }

        // Demander confirmation
        if (!confirmLeaveAll(groups.length)) {
            log("Action annul√©e par l'utilisateur");
            return;
        }

        log(`üöÄ D√©but de la sortie de ${groups.length} groupe(s)`);

        let successCount = 0;
        let failureCount = 0;

        // Notification de d√©but
        if (settings.store.showNotifications) {
            showNotification({
                title: "üîÑ LeaveAllGroups en cours",
                body: `Sortie de ${groups.length} groupe(s) en cours...`,
                icon: undefined
            });
        }

        showToast(Toasts.Type.MESSAGE, `üîÑ Sortie de ${groups.length} groupe(s) en cours...`);

        // Quitter chaque groupe
        for (const group of groups) {
            const groupName = group.name || `Groupe ${group.id}`;
            debugLog(`Traitement du groupe: ${groupName} (${group.id})`);

            const success = await leaveGroup(group.id);
            if (success) {
                successCount++;
                debugLog(`‚úÖ Quitt√©: ${groupName}`);
            } else {
                failureCount++;
                debugLog(`‚ùå √âchec: ${groupName}`);
            }

            // D√©lai pour √©viter le rate limiting
            if (settings.store.delayBetweenLeaves > 0) {
                await new Promise(resolve => setTimeout(resolve, settings.store.delayBetweenLeaves));
            }
        }

        const totalProcessed = successCount + failureCount;

        log(`‚úÖ Op√©ration termin√©e:
- Groupes trait√©s: ${totalProcessed}
- Succ√®s: ${successCount}
- √âchecs: ${failureCount}`);

        // Notification finale
        if (settings.store.showNotifications) {
            const title = failureCount > 0 ? "‚ö†Ô∏è LeaveAllGroups termin√© avec erreurs" : "‚úÖ LeaveAllGroups termin√©";
            const body = failureCount > 0
                ? `${successCount} groupes quitt√©s, ${failureCount} √©checs`
                : `${successCount} groupes quitt√©s avec succ√®s`;

            showNotification({
                title,
                body,
                icon: undefined
            });
        }

        // Toast final
        if (failureCount > 0) {
            showToast(Toasts.Type.FAILURE, `‚ö†Ô∏è ${successCount} groupes quitt√©s, ${failureCount} √©checs`);
        } else {
            showToast(Toasts.Type.SUCCESS, `‚úÖ ${successCount} groupes quitt√©s avec succ√®s`);
        }

    } catch (error) {
        log(`‚ùå Erreur g√©n√©rale: ${error}`, "error");

        if (settings.store.showNotifications) {
            showNotification({
                title: "‚ùå LeaveAllGroups - Erreur",
                body: "Une erreur est survenue lors de la sortie des groupes",
                icon: undefined
            });
        }

        showToast(Toasts.Type.FAILURE, "‚ùå Erreur lors de la sortie des groupes");
    }
}

// Menu contextuel pour les groupes
const GroupContextMenuPatch: NavContextMenuPatchCallback = (children, { channel }: { channel: Channel; }) => {
    if (!settings.store.enabled) return;

    // V√©rifier que c'est un groupe DM
    if (channel?.type !== 3) return;

    const container = findGroupChildrenByChildId("leave-channel", children);

    if (container) {
        container.push(
            <Menu.MenuItem
                id="vc-leave-all-groups"
                label="üö™ Quitter tous les groupes"
                action={leaveAllGroups}
                color="danger"
            />
        );
    }
};

// Menu contextuel pour les serveurs (acc√®s global)
const ServerContextMenuPatch: NavContextMenuPatchCallback = (children, props) => {
    if (!settings.store.enabled) return;

    const group = findGroupChildrenByChildId("privacy", children);

    if (group) {
        group.push(
            <Menu.MenuItem
                id="vc-leave-all-groups-server"
                label="üö™ Quitter tous les groupes"
                action={leaveAllGroups}
                color="danger"
            />
        );
    }
};

// Menu contextuel pour les utilisateurs (acc√®s depuis profil)
const UserContextMenuPatch: NavContextMenuPatchCallback = (children, props) => {
    if (!settings.store.enabled) return;

    const container = findGroupChildrenByChildId("block", children) || findGroupChildrenByChildId("remove-friend", children);

    if (container) {
        container.push(
            <Menu.MenuItem
                id="vc-leave-all-groups-user"
                label="üö™ Quitter tous les groupes"
                action={leaveAllGroups}
                color="danger"
            />
        );
    }
};

export default definePlugin({
    name: "LeaveAllGroups",
    description: "Permet de quitter tous les groupes Discord d'un seul clic avec rate limiting configurable",
    authors: [Devs.BigDuck],
    settings,

    contextMenus: {
        "gdm-context": GroupContextMenuPatch,
        "guild-context": ServerContextMenuPatch,
        "user-context": UserContextMenuPatch
    },

    start() {
        log("Plugin LeaveAllGroups d√©marr√©");
    },

    stop() {
        log("Plugin LeaveAllGroups arr√™t√©");
    }
});
