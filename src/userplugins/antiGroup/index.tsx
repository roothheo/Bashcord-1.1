/*
 * Vencord, a Discord client mod
 * Copyright (c) 2025 Vendicated and contributors
 * SPDX-License-Identifier: GPL-3.0-or-later
 */

import { definePluginSettings } from "@api/Settings";
import { showNotification } from "@api/Notifications";
import definePlugin, { OptionType } from "@utils/types";
import { Constants, ChannelStore, RestAPI, UserStore } from "@webpack/common";

const settings = definePluginSettings({
    enabled: {
        type: OptionType.BOOLEAN,
        description: "Activer le plugin AntiGroup",
        default: true
    },
    showNotifications: {
        type: OptionType.BOOLEAN,
        description: "Afficher les notifications lors de la sortie automatique",
        default: true
    },
    verboseLogs: {
        type: OptionType.BOOLEAN,
        description: "Afficher des logs d√©taill√©s dans la console",
        default: true
    },
    delay: {
        type: OptionType.NUMBER,
        description: "D√©lai avant de quitter le groupe (en millisecondes)",
        default: 1000,
        min: 100,
        max: 10000
    },
    whitelist: {
        type: OptionType.STRING,
        description: "IDs des utilisateurs autoris√©s √† vous ajouter (s√©par√©s par des virgules)",
        default: ""
    },
    autoReply: {
        type: OptionType.BOOLEAN,
        description: "Envoyer un message automatique avant de quitter",
        default: true
    },
    replyMessage: {
        type: OptionType.STRING,
        description: "Message √† envoyer avant de quitter",
        default: "Je ne souhaite pas √™tre ajout√© √† des groupes. Merci de me contacter en priv√©."
    }
});

// Fonction de log avec pr√©fixe
function log(message: string, level: "info" | "warn" | "error" = "info") {
    const timestamp = new Date().toLocaleTimeString();
    const prefix = `[AntiGroup ${timestamp}]`;

    switch (level) {
        case "warn":
            console.warn(prefix, message);
            break;
        case "error":
            console.error(prefix, message);
            break;
        default:
            console.log(prefix, message);
    }
}

// Fonction de log verbose (seulement si activ√©)
function verboseLog(message: string) {
    if (settings.store.verboseLogs) {
        log(message);
    }
}

// Fonction pour quitter un groupe DM
async function leaveGroupDM(channelId: string) {
    try {
        const channel = ChannelStore.getChannel(channelId);
        const channelName = channel?.name || "Groupe sans nom";
        const recipients = channel?.recipients || [];

        log(`üöÄ D√©but de la proc√©dure de sortie du groupe "${channelName}" (ID: ${channelId})`);
        verboseLog(`üìä Informations du groupe:
- Nom: ${channelName}
- ID: ${channelId}
- Type: ${channel?.type}
- Owner: ${channel?.ownerId}
- Nombre de membres: ${recipients.length + 1}`);

        // Envoyer un message automatique si activ√©
        if (settings.store.autoReply && settings.store.replyMessage.trim()) {
            log(`üí¨ Envoi du message automatique: "${settings.store.replyMessage}"`);

            try {
                await RestAPI.post({
                    url: Constants.Endpoints.MESSAGES(channelId),
                    body: {
                        content: settings.store.replyMessage
                    }
                });

                log(`‚úÖ Message automatique envoy√© avec succ√®s`);
                verboseLog(`‚è±Ô∏è Attente de 500ms pour que le message soit d√©livr√©...`);

                // Attendre un peu avant de quitter pour que le message soit envoy√©
                await new Promise(resolve => setTimeout(resolve, 500));
            } catch (msgError) {
                log(`‚ùå Erreur lors de l'envoi du message automatique: ${msgError}`, "error");
            }
        } else {
            verboseLog(`üîá Message automatique d√©sactiv√© ou vide`);
        }

        // Quitter le groupe
        log(`üö™ Tentative de sortie du groupe...`);
        await RestAPI.del({
            url: Constants.Endpoints.CHANNEL(channelId)
        });

        log(`‚úÖ Groupe quitt√© avec succ√®s: "${channelName}"`);

        // Notification de succ√®s
        if (settings.store.showNotifications) {
            showNotification({
                title: "üõ°Ô∏è AntiGroup - Groupe quitt√©",
                body: `Vous avez automatiquement quitt√© le groupe "${channelName}"`,
                icon: undefined
            });
            verboseLog(`üîî Notification de succ√®s affich√©e`);
        }

        // Log final avec statistiques
        log(`üìà Statistiques de la sortie:
- Groupe: "${channelName}" (${channelId})
- Message auto envoy√©: ${settings.store.autoReply ? "Oui" : "Non"}
- D√©lai appliqu√©: ${settings.store.delay}ms
- Notification affich√©e: ${settings.store.showNotifications ? "Oui" : "Non"}`);

    } catch (error) {
        const channel = ChannelStore.getChannel(channelId);
        const channelName = channel?.name || "Groupe inconnu";

        log(`‚ùå ERREUR lors de la sortie du groupe "${channelName}" (${channelId}): ${error}`, "error");

        // Log d√©taill√© de l'erreur
        if (settings.store.verboseLogs) {
            console.error("[AntiGroup] D√©tails de l'erreur:", {
                channelId,
                channelName,
                error,
                stack: error instanceof Error ? error.stack : undefined
            });
        }

        // Notification d'erreur
        if (settings.store.showNotifications) {
            showNotification({
                title: "‚ùå AntiGroup - Erreur",
                body: `Impossible de quitter automatiquement le groupe "${channelName}"`,
                icon: undefined
            });
            verboseLog(`üîî Notification d'erreur affich√©e`);
        }
    }
}

// Fonction pour v√©rifier si un utilisateur est dans la whitelist
function isUserWhitelisted(userId: string): boolean {
    const whitelist = settings.store.whitelist
        .split(",")
        .map(id => id.trim())
        .filter(id => id.length > 0);

    const isWhitelisted = whitelist.includes(userId);
    verboseLog(`üîç V√©rification whitelist pour utilisateur ${userId}: ${isWhitelisted ? "AUTORIS√â" : "NON AUTORIS√â"}`);

    return isWhitelisted;
}

// Fonction pour v√©rifier si l'utilisateur actuel a √©t√© ajout√© r√©cemment au groupe
function wasRecentlyAdded(channel: any, currentUserId: string): boolean {
    // V√©rifier si c'est un groupe DM (type 3)
    if (channel.type !== 3) {
        verboseLog(`‚ùå Canal ${channel.id} n'est pas un groupe DM (type: ${channel.type})`);
        return false;
    }

    // Si le canal vient d'√™tre cr√©√© et que l'utilisateur n'en est pas l'owner
    const wasAdded = channel.ownerId !== currentUserId;
    verboseLog(`üîç V√©rification ajout r√©cent: ${wasAdded ? "AJOUT√â PAR QUELQU'UN D'AUTRE" : "CR√â√â PAR VOUS"} (Owner: ${channel.ownerId})`);

    return wasAdded;
}

export default definePlugin({
    name: "AntiGroup",
    description: "Quitte automatiquement les groupes DM d√®s qu'on y est ajout√©",
    authors: [{
        name: "Bash",
        id: 1327483363518582784n
    }],
    settings,

    flux: {
        // √âv√©nement d√©clench√© quand un nouveau canal est cr√©√© (incluant les groupes DM)
        CHANNEL_CREATE(event: { channel: any; }) {
            verboseLog(`üì∫ √âv√©nement CHANNEL_CREATE d√©tect√© pour canal ${event.channel?.id}`);

            if (!settings.store.enabled) {
                verboseLog(`üîí Plugin d√©sactiv√©, ignor√©`);
                return;
            }

            const { channel } = event;
            const currentUserId = UserStore.getCurrentUser()?.id;

            if (!channel || !currentUserId) {
                verboseLog(`‚ùå Donn√©es manquantes: channel=${!!channel}, currentUserId=${!!currentUserId}`);
                return;
            }

            verboseLog(`üìã Analyse du canal:
- ID: ${channel.id}
- Type: ${channel.type}
- Nom: ${channel.name || "Sans nom"}
- Owner: ${channel.ownerId}
- Utilisateur actuel: ${currentUserId}`);

            // V√©rifier si c'est un groupe DM (type 3)
            if (channel.type !== 3) {
                verboseLog(`‚è≠Ô∏è Ignor√©: pas un groupe DM (type ${channel.type})`);
                return;
            }

            // V√©rifier si l'utilisateur a √©t√© r√©cemment ajout√©
            if (!wasRecentlyAdded(channel, currentUserId)) {
                verboseLog(`‚è≠Ô∏è Ignor√©: vous √™tes le cr√©ateur du groupe`);
                return;
            }

            log(`üéØ NOUVEAU GROUPE DM D√âTECT√â: "${channel.name || 'Sans nom'}" (${channel.id})`);

            // V√©rifier si l'owner du groupe est dans la whitelist
            if (channel.ownerId && isUserWhitelisted(channel.ownerId)) {
                log(`‚úÖ Owner ${channel.ownerId} est dans la whitelist, groupe autoris√©`);
                return;
            }

            // V√©rifier si d'autres membres du groupe sont dans la whitelist
            const whitelistedMember = channel.recipients?.find((recipient: any) =>
                isUserWhitelisted(recipient.id)
            );

            if (whitelistedMember) {
                log(`‚úÖ Membre ${whitelistedMember.id} est dans la whitelist, groupe autoris√©`);
                return;
            }

            log(`‚ö†Ô∏è AUCUN MEMBRE AUTORIS√â TROUV√â - Programmation de la sortie automatique dans ${settings.store.delay}ms`);

            // Notification imm√©diate de d√©tection
            if (settings.store.showNotifications) {
                showNotification({
                    title: "üö® AntiGroup - Groupe d√©tect√©",
                    body: `Ajout√© au groupe "${channel.name || 'Sans nom'}" - Sortie automatique dans ${settings.store.delay / 1000}s`,
                    icon: undefined
                });
            }

            // Attendre le d√©lai configur√© avant de quitter
            setTimeout(() => {
                verboseLog(`‚è∞ D√©lai √©coul√©, ex√©cution de la sortie automatique`);
                leaveGroupDM(channel.id);
            }, settings.store.delay);
        }
    },

    start() {
        log(`üöÄ Plugin AntiGroup d√©marr√©`);
        log(`‚öôÔ∏è Configuration actuelle:
- Notifications: ${settings.store.showNotifications ? "ON" : "OFF"}
- Logs verbeux: ${settings.store.verboseLogs ? "ON" : "OFF"}
- Message auto: ${settings.store.autoReply ? "ON" : "OFF"}
- D√©lai: ${settings.store.delay}ms
- Whitelist: ${settings.store.whitelist || "Vide"}`);

        if (settings.store.showNotifications) {
            showNotification({
                title: "üõ°Ô∏è AntiGroup activ√©",
                body: "Protection contre les groupes DM non d√©sir√©s activ√©e",
                icon: undefined
            });
        }
    },

    stop() {
        log(`üõë Plugin AntiGroup arr√™t√©`);

        if (settings.store.showNotifications) {
            showNotification({
                title: "üõ°Ô∏è AntiGroup d√©sactiv√©",
                body: "Protection contre les groupes DM d√©sactiv√©e",
                icon: undefined
            });
        }
    }
});
